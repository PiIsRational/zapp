//* This file is part of Zapp, a packrat parser generator.
//* Copyright (C) 2024  Daniel Gr√©vent
//* 
//* This program is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* 
//* This program is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* 
//* You should have received a copy of the GNU General Public License
//* along with this program.  If not, see <https://www.gnu.org/licenses/>.

%% NAME Zapp

Grammar = Spacing (TopLevelComment Spacing)* Name MetaData Definition+ FileEnd ;

// the metadata
MetaData 
    = TopHeader FieldHeader
    | FieldHeader? TopHeader?
    ;

Name = '%% NAME' Spacing Identifier ;

TopHeader = TOP_START HeaderInner HEADER_END Spacing ;

FieldHeader = FIELD_START HeaderInner HEADER_END Spacing ;

HeaderInner = HeaderContent* ;

HeaderContent 
    = !HEADER_END .
    | Literal 
    ;

// the metadata
Definition = Identifier TypeAnnotation EQUALS ActionSequence (PIPE ActionSequence)* SEMICOLON ;

TypeAnnotation 
    = COLON Identifier
    | COLON Literal 
    | @ 
    ;

ActionSequence
    = Sequence '{' Action '}' Spacing
    | Sequence
    ;

Sequence = Operated+ ;

// START ACTION
Action = ActionParts ;

// does not accept epsilon
ActionParts
    = ActionBlocks '{' ActionParts '}' ActionParts             
    | ActionBlocks
    | @
    ;

ActionBlocks
    = ActionVar ActionBlocks
    | !["'{}$] . ActionBlocks
    | Literal ActionBlocks 
    | @ 
    ;

ActionVar
    = '$' [0-9] [0-9]*  // immutable variables
    | '$*' [1-9] [0-9]*  // mutable variables
    ;

// END ACTION

Operated = PrefixOp Primary SuffixOp ;

PrefixOp
    = AND
    | NOT
    | @
    ;

SuffixOp
    = STAR
    | PLUS
    | QUESTION
    | @
    ;

Primary
    = OPEN_PAREN Sequence CLOSE_PAREN
    | Identifier
    | Literal
    | Class
    | DOT
    | AT
    | CUT_OP
    ;

// lexical syntax
Identifier = IDENTIFIER Spacing ;
IDENTIFIER = IdentStart IdentCont* ;
IdentStart = [a-zA-Z_] ;
IdentCont 
    = IdentStart
    | [0-9]
    ;

Literal
    = ['] (!['] Char)* ['] Spacing
    | ["] (!["] Char)* ["] Spacing
    ;

Class = '[' (!']' Range)* ']' Spacing ;

Range
    = RangeChar '-' RangeChar 
    | RangeChar
    ;

RangeChar
    = '\\' [-] 
    | !']' Char
    ;

// there is no null char allowed 
Char
    = '\\' [nrt'"\[\]\\]
    | '\\x' [1-9A-Fa-f] [0-9A-Fa-f]
    | '\\x0' [1-9A-Fa-f]
    | !'\\' .
    ; 

// the terminal Nonterminals
TOP_START = '%% TOP' LineEnd Spacing ;
FIELD_START = '%% FIELDS' LineEnd Spacing ;
HEADER_END = '%%' LineEnd Spacing ;
AT = '@' Spacing ;
DOT = '.' Spacing ;
OPEN_PAREN = '(' Spacing ;
CLOSE_PAREN = ')' Spacing ;
QUESTION = '?' Spacing ;
STAR = '*' Spacing ;
PLUS = '+' Spacing ;
AND = '&' Spacing ;
NOT = '!' Spacing ;
COLON = ':' Spacing ;
PIPE = '|' Spacing ;
EQUALS = '=' Spacing ;
SEMICOLON = ';' Spacing ;
CUT_OP = '^' Spacing ;

// Spacing
Spacing = SpaceUnit* ;

SpaceUnit 
    = Space 
    | Comment
    ;

Comment = '//' ![*] (!LineEnd .)* LineEnd ;

TopLevelComment = '//*' CommentInner LineEnd ; 

CommentInner = (!LineEnd .)* ;

LineEnd 
    = '\r\n'
    | '\n'
    | '\r'
    ;

Space 
    = ' '
    | '\t'
    | LineEnd   
    ;

FileEnd = !. ;
