%% NAME NewCalc

Grammar: isize = Spacing Addition End { $2 };

Addition: isize = Neg (PLUS Neg)* {
    blk: {
        var sum = $1;
        for ($2.items) |val| {
            sum += val;
        }
        $2.deinit();
        break: blk sum;
    }
};

Neg: isize = Mul (MINUS Mul)* {
    blk: {
        var neg = $1;
        for (0..$2.items.len) |i| {
            const elem = $2.items[$2.items.len - 1 - i];
            neg -= elem;
        }
        $2.deinit();
        break: blk neg;
    }
};

Mul: isize = Div (STAR Div)* {
    blk: {
        var prod = $1;
        for ($2.items) |val| {
            prod *= val;
        }
        $2.deinit();
        break: blk prod;
    }
};

Div: isize = UnaryNeg (SLASH UnaryNeg)* {
    blk: {
        var div = $1;
        for (0..$2.items.len) |i| {
            const elem = $2.items[$2.items.len - 1 - i];
            div = @divFloor(div, elem);
        }
        $2.deinit();
        break: blk div;
    }
};

UnaryNeg: isize = MINUS Single { -$2 }
                | Single { $1 }
                ;

Single: isize = L_PAREN Addition R_PAREN { $2 } 
              | Number { $1 }
              ;

// End Tokens
PLUS = '+' Spacing;
STAR = '*' Spacing;
SLASH = '/' Spacing;
MINUS = '-' Spacing;
L_PAREN = '(' Spacing;
R_PAREN = ')' Spacing;

Number: isize = NUMBER Spacing { $1 };
NUMBER: isize = [0-9]+ {
    try std.fmt.parseInt(isize, $0, 10)
};

// Spacing
Spacing = SpacingInner* ;

SpacingInner = Comment 
             | Space
             ;

Comment = '#' (!LineEnd .)* LineEnd ;

Space = [\t ]
      | LineEnd
      ;

LineEnd = '\r\n'
        | '\n'
        | '\r'
        ;

End = !. ;
